# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.9)
{
  # A helpful description of your flake
  description = "My NixOS configuration";

  # Flake inputs
  inputs.stylix.url = "https://flakehub.com/f/danth/stylix/0.1.282.tar.gz";
  inputs.stylix.inputs.nixpkgs.follows = "nixpkgs";
  inputs.stylix.inputs.home-manager.follows = "home-manager";

  inputs.nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/0.1.*.tar.gz";

  inputs.home-config.url = "github:jalil-salame/home.nix";
  inputs.home-config.inputs.stylix.follows = "stylix";
  inputs.home-config.inputs.nixpkgs.follows = "nixpkgs";
  inputs.home-config.inputs.home-manager.follows = "home-manager";
  inputs.home-config.inputs.flake-schemas.follows = "flake-schemas";

  inputs.home-manager.url = "https://flakehub.com/f/nix-community/home-manager/0.1.*.tar.gz";
  inputs.home-manager.inputs.nixpkgs.follows = "nixpkgs";

  inputs.flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*.tar.gz";

  # Flake outputs that other flakes can use
  outputs = { flake-schemas, nixpkgs, stylix, home-manager, home-config, ... }:
    let
      inherit (nixpkgs) lib;
      # Helpers for producing system-specific outputs
      supportedSystems = [ "x86_64-linux" "aarch64-linux" ];
      forEachSupportedSystem = f: nixpkgs.lib.genAttrs supportedSystems (system: f { pkgs = import nixpkgs { inherit system; }; });
      # Module documentation
      doc = forEachSupportedSystem ({ pkgs }: { doc = import ./docs { inherit pkgs lib; }; });
    in
    {
      # Schemas tell Nix about the structure of your flake's outputs
      schemas = flake-schemas.schemas;

      packages = doc;

      # Nix files formatter (run `nix fmt`)
      formatter = forEachSupportedSystem ({ pkgs }: pkgs.nixpkgs-fmt);

      nixosModules =
        let
          nixosModule = {
            imports = [
              (import ./nixos { inherit stylix; })
              home-manager.nixosModules.home-manager
            ];

            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.sharedModules = [ home-config.nixosModules.nixosModule ];

            # Pin nixpkgs
            nix.registry.nixpkgs.flake = nixpkgs;
          };
        in
        {
          default = nixosModule;
          inherit nixosModule;
        };
    };
}
