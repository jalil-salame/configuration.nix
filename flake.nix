# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.9)
{
  # A helpful description of your flake
  description = "My NixOS configuration";

  # Flake inputs
  inputs.stylix.url = "github:jalil-salame/stylix/fallback-fonts-v2";
  inputs.stylix.inputs.nixpkgs.follows = "nixpkgs";
  inputs.stylix.inputs.home-manager.follows = "home-manager";

  inputs.nixpkgs.url = "nixpkgs/nixos-unstable";

  inputs.jpassmenu.url = "github:jalil-salame/jpassmenu";
  inputs.jpassmenu.inputs.nixpkgs.follows = "nixpkgs";

  inputs.audiomenu.url = "github:jalil-salame/audiomenu";
  inputs.audiomenu.inputs.nixpkgs.follows = "nixpkgs";

  inputs.nixvim.url = "github:nix-community/nixvim";
  inputs.nixvim.inputs.nixpkgs.follows = "nixpkgs";
  inputs.nixvim.inputs.home-manager.follows = "home-manager";
  # disable MacOS stuff
  inputs.nixvim.inputs.nix-darwin.follows = "";

  # WARN: Flakehub is outdated (39 days out of date)
  # inputs.home-manager.url = "https://flakehub.com/f/nix-community/home-manager/0.1.*.tar.gz";
  inputs.home-manager.url = "github:nix-community/home-manager";
  inputs.home-manager.inputs.nixpkgs.follows = "nixpkgs";

  inputs.nixos-hardware.url = "github:NixOS/nixos-hardware";

  inputs.neovim-flake.url = "github:neovim/neovim?dir=contrib";
  inputs.neovim-flake.inputs.nixpkgs.follows = "nixpkgs";

  # Lix
  inputs.lix.url = "https://git.lix.systems/lix-project/lix/archive/main.tar.gz";
  inputs.lix.flake = false;
  inputs.lix-module.url = "https://git.lix.systems/lix-project/nixos-module/archive/main.tar.gz";
  inputs.lix-module.inputs.lix.follows = "lix";
  inputs.lix-module.inputs.nixpkgs.follows = "nixpkgs";

  # Flake outputs that other flakes can use
  outputs = {
    self,
    nixpkgs,
    stylix,
    home-manager,
    nixos-hardware,
    jpassmenu,
    audiomenu,
    nixvim,
    neovim-flake,
    lix,
    lix-module,
  }: let
    inherit (nixpkgs) lib;
    # Helpers for producing system-specific outputs
    supportedSystems = [
      "x86_64-linux"
      "aarch64-linux"
    ];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (
        system:
          f {
            inherit system;
            pkgs = import nixpkgs {inherit system;};
          }
      );
    overlays = builtins.attrValues self.overlays;
  in {
    checks = forEachSupportedSystem (
      {
        pkgs,
        system,
      }: let
        src = builtins.path {
          path = ./.;
          name = "configuration.nix";
        };
      in {
        nvim = nixvim.lib.${system}.check.mkTestDerivationFromNixvimModule {
          pkgs = import nixpkgs {inherit system overlays;};
          module = ./nvim/nixvim.nix;
        };
        formatting = let
          fmt = pkgs.lib.getExe self.formatter.${system};
        in
          pkgs.stdenvNoCC.mkDerivation {
            name = "nix-formatting-check";
            dontUnpack = true;
            dontBuild = true;
            doCheck = true;
            checkPhase = "${fmt} --check ${src}";
            installPhase = "mkdir $out";
          };
        typos = let
          typos = pkgs.lib.getExe pkgs.typos;
        in
          pkgs.stdenvNoCC.mkDerivation {
            name = "typos-check";
            dontUnpack = true;
            dontBuild = true;
            doCheck = true;
            checkPhase = "${typos} --color=always ${src}";
            installPhase = "mkdir $out";
          };
      }
    );

    packages = forEachSupportedSystem (
      {
        pkgs,
        system,
      }: {
        inherit
          (import ./docs {inherit pkgs lib;})
          docs
          nixos-markdown
          nvim-markdown
          home-markdown
          ;
        # Nvim standalone module
        nvim = nixvim.legacyPackages.${system}.makeNixvimWithModule {
          pkgs = import nixpkgs {inherit system overlays;};
          module = ./nvim/nixvim.nix;
        };
      }
    );

    # Provide necessary overlays
    overlays = {
      nixvim = nixvim.overlays.default;
      neovim-nightly = neovim-flake.overlay;
      jpassmenu = jpassmenu.overlays.default;
      audiomenu = audiomenu.overlays.default;
      # FIXME: remove once merged in nixpkgs
      fix-noice-nvim = final: prev: {
        vimPlugins =
          prev.vimPlugins
          // {
            noice-nvim = prev.vimUtils.buildVimPlugin {
              pname = "noice.nvim";
              version = "2024-05-09";
              src = final.fetchFromGitHub {
                owner = "folke";
                repo = "noice.nvim";
                rev = "v2.0.2";
                sha256 = "sha256-YWqphpaxr/729/6NTDEWKOi2FnY/8xgjdsDQ9ePj7b8=";
              };
              meta.homepage = "https://github.com/folke/noice.nvim/";
            };
          };
      };
    };

    # Nix files formatter (run `nix fmt`)
    formatter = forEachSupportedSystem ({pkgs, ...}: pkgs.alejandra);

    # Example vm configuration
    nixosConfigurations.vm = let
      system = "x86_64-linux";
      config.allowUnfreePredicate = pkg: builtins.elem (lib.getName pkg) ["steam-original"];
      pkgs = import nixpkgs {inherit system overlays config;};
    in
      lib.nixosSystem {
        inherit system pkgs;
        modules = [
          self.nixosModules.vm # import vm module
          {
            time.timeZone = "Europe/Berlin";
            i18n.defaultLocale = "en_US.UTF-8";

            users.users.jdoe.password = "example";
            users.users.jdoe.isNormalUser = true;
            users.users.jdoe.extraGroups = [
              "wheel"
              "video"
              "networkmanager"
            ];

            home-manager.users.jdoe = {
              home.username = "jdoe";
              home.homeDirectory = "/home/jdoe";

              jhome.enable = true;
              jhome.gui.enable = true;
              jhome.dev.rust.enable = true;
            };

            nix.registry.nixpkgs.flake = nixpkgs;

            jconfig.enable = true;
            jconfig.gui.enable = true;
          }
        ];
      };

    nixosModules = let
      nvim-config.imports = [
        nixvim.homeManagerModules.nixvim
        ./nvim
      ];
      overlays = builtins.attrValues self.overlays;
      homeManagerModuleSandalone = import ./home {inherit overlays nvim-config stylix;};
      homeManagerModuleNixOS = import ./home {inherit overlays nvim-config;};
      nixosModule = {
        imports = [
          (import ./system {inherit stylix;})
          home-manager.nixosModules.home-manager
        ] ++ nixpkgs.lib.optional (lix != null && lix-module != null) lix-module.nixosModules.default;

        home-manager.useGlobalPkgs = true;
        home-manager.useUserPackages = true;
        home-manager.sharedModules = [homeManagerModuleNixOS];

        # Pin nixpkgs
        nix.registry.nixpkgs.flake = nixpkgs;
      };

      machines = [
        "capricorn"
        "gemini"
        "libra"
        "vm"
      ];
      mkMachine = hostname: {
        imports = [
          nixosModule
          (import (./machines + "/${hostname}") {inherit nixos-hardware;})
        ];
        home-manager.sharedModules = [{jhome.hostName = hostname;}];
      };
      machineModules = lib.genAttrs machines mkMachine;
    in
      {
        default = nixosModule;
        inherit nixosModule homeManagerModuleNixOS homeManagerModuleSandalone;
      }
      // machineModules;

    devShells = forEachSupportedSystem (
      {
        pkgs,
        system,
      }: {
        default = pkgs.mkShell {
          buildInputs = with pkgs; [
            just
            self.packages.${system}.nvim
          ];
          QEMU_OPTS_WL = "-smp 4 -device virtio-gpu-rutabaga,gfxstream-vulkan=on,cross-domain=on,hostmem=2G,wsi=headless";
        };
      }
    );
  };
}
